--optionsTable:
--    selectedIndex
--    options{} OR action()
--        options[x] is an optionsTable

local tbl = {}

-- for creating WM-managed free-floating windows with an options hierarchy.
-- will let the user select 1 option at any depth in a structure as described
tbl.getMenuCreator = function()
    local t = {}
    t.windows = {}
    t.hierarchy = {}
    t.waitForInput = function()
        local e = {os.pullEvent()}
        if e[1] == "mouse_click" then
            return t.clickedAt(e[3],e[4],e[5]) 
            -- WM handles sending correct window as event[5]
        elseif e[1] == "key" then
            return t.keyPressed(e[2])
        end
    end
    t.newOptionsWindow = function(options,infoTable)
        local newIndex = #t.windows+1
        t.windows[newIndex] = sys.requestNewWindow(
            infoTable.x+infoTable.w,
            infoTable.selectedY,
            20,
            #options)
        t.windows[newIndex].bringToFront()
        return newIndex
    end
    t.onOptionPath = function(depth,selected)
        local dTable = t.hierarchy[depth].items[selected]
        if dTable.options then
            local met = {}
            met.x, met.y = t.windows[depth].getPosition()
            met.w, met.h = t.windows[depth].getSize()
            met.selectedY = selected
            -- remove any windows with higher index,
            -- ex. if deep menu was brought up, but then a click on an
            -- earlier window (option) happened. Bring up new window, 
            -- delete older ones with higher index..
            for i=depth+1, #t.windows do
                t.windows[i].removeWindow()
            end
            t.newOptionsWindow(dTable.options,met)
        else
            for i=1,#t.windows do
                t.windows[i].removeWindow()
            end
            -- remove all option windows on action
            dTable.action()
        end
    end
    t.create = function(optionsTable)
        t.newOptionsWindow(optionsTable.options)
        t.hierarchy[1] = optionsTable
    end
    t.yield = function()
        -- loop until non-options-menu related event
        while true do
            local e = {os.pullEvent()}
            if e[1] == "mouse_click" and e[5] then
                t.onClicked(e[3],e[4],e[5])
            else
                return e[1],e[2],e[3],e[4],e[5]
            end
        end
    end
    return t
end

tbl.getInstanceUI = function(termInstance)
    local t = {}
    t.term = termInstance
	t.
    t.getBasicComponent = function()
        local com = {}
        com.x=1;com.y=1;com.w=0;com.h=0;com.z=1
        com.fg=colors.white;com.bg=colors.black
        altfg=colors.lightGray;altbg=colors.darkGray
        com.buffer=true; com.isfocused; com.term=t.term
        com.title=""
		com.text=""
        com.desctiption=""
        com.onaction = function() end -- event like click, enter
        com.ondelete = function() end
        com.onfocus =  function() end
        com.onevent =  function() end -- general event 
        com.show =     function() end -- render component
        com.oninterval=function() end
		com.focus =    function() end
		com.unfocus =  function() end
        com._showsetup = function()
            if com.buffer then com.term.setVisible(false) end
            com.term.setTextColor(com.fg)
            com.term.setBackgroundColor(com.bg)
            com.term.setCursorPos(com.x,com.y)
        end
        com._showend = function()
            if com.buffer then com.term.setVisible(true) end
            -- keep buffering?
        end
        com._clear = function()
            local s = ""
            for i=1, com.w do
                s = s.." " -- TODO: make this better
            end
            for i=com.y, i<com.y+com.h do
                com.term.setCursorPos(com.x,i)
                com.term.write(s)
            end
        end
        com.setCallback = function(callback)
            com.callback = callback
        end
		com.setPos = function(x,y)
			com.x=x; com.y=y
		end
		com.setSize = function(w,h)
			com.w=w; com.h=h
		end
		com.setTitle = function(txt)
			com.title = txt
		end
		com.setText = function(txt)
			com.text = txt
		end
		com.setDescription = function(txt)
			com.description = txt
		end
        return com
    end
    t.getBasicInputBox = function()
        local com = t.getBasicComponent()
        com.textField = ""
        com.isInBlink = false
        com.onevent = function(event)
            if event[1]=="char" then
                com.textField = com.textField..event[2]
            end
            if event[1]=="key" then
                if event[2]==keys.enter then
                    com.onaction()
                elseif event[2]==keys.backspace then
                    com.textField = com.textField:sub(1,#com.textField-1)
                end
            end
        end
        com.show = function()
            com._showsetup()
            com._clear()
            local len = #com.textField
            local start = (com.w-1)>len and 1 or len-com.w-1
            com.term.write(com.textField:sub(start,#com.textField))
            com.term.setCursorPos(com.x+com.w-1,com.y)
            if com.isInBlink then
                com.term.write("_")
            end
            com._showend()
        end
        com.oninterval = function()
			if not com.isfocused then
				com.isInBlink = false
			else
            	com.isInBlink = not com.isInBlink
			end
        end
        com.onaction = function()
            local str = com.textField
            com.textField = ""
			com._showsetup()
            com._clear()
			com._showend()
            return com.callback(str)
        end
        return com
    end
    t.getBasicButton = function(callback)
        local com = t.getBasicComponent()
        com.bg = colors.green
        com.altbg = colors.darkGreen
        com.bgSwapped = false
        com.onaction = function()
            com.focus()
            callback()
        end
        com.show = function()
            com._showsetup()
            com._clear()
            com.term.setCursorPos(com.x,com.y)
            com.term.write(com.title:sub(1,com.w))
            com._showend()
        end
        com.onevent = function(event)
            if event[1] == "mouse_up" then
                -- if component still has focus, but mouse_up rec.
                com.unfocus()
            end
        end
        com.focus = function()
            local temp = com.bg
            com.bg = com.altbg
            com.altbg = com.bg
            com.bgSwapped = true
            com.show()
			com.isfocused = true
        end
        com.unfocus = function()
            if com.isfocused then
                local temp = com.bg
                com.bg = com.altbg
                com.altbg = temp
				com.bgswapped = false
            end
        end
        return com
    end
	t.getBasicTextBox = function()
		local com = t.getBasicComponent()
		com.show = function()
			com._showsetup()
			com._clear()
			local lines = {}
			local copy = com.text
			local index = 1
			while #copy > 0 do
				if #lines[index]+copy:sub(1,copy:find("%s"))<=com.w then
					lines[index] = lines[index]+
						copy:sub(1,copy:find("%s"))
					copy = copy:sub(copy:find("%s")+1,#copy)
				elseif #lines[index] == 0 then
					lines[index] = copy:sub(1,com.w-1)+"-"
					copy = copy:sub(com.w,#copy)
				else
					index = index + 1
				end
			end
			for i=1,#lines do
				if i>com.h then
					break
				end
				com.term.setTextPosition(com.x,com.y+i-1)
				com.term.write(lines[i])
			end
			com._showend()
		end
		return com
	end
	t.getBasicToggle = function()
		local com = t.getBasicComponent()
		com.toggled = false
		com.toggle = function(bool)
			com.toggled = bool
		end
		com.show = function()
			com._showsetup()
			com._clear()
			for j=1,com.h do
				com.term.setBackgroundColor(com.bg)
				com.term.setTextColor(com.altbg)
				for i=1,com.w/2 do
					com.term.setCursorPos(com.x+i-1,com.y+j-1)
					com.term.write("#")
				end
				com.term.setBackgroundColor(com.fg)
				com.term.setTextColor(com.altfg)
				for i=com.w/2+1,com.w do
					com.term.setCursorPos(com.x+i-1,com.y+j-1)
					com.term.write(" ")
				end
			end
			com._showend()
		end
		return com
	end
	t.getBasicContainer = function()
		local con = t.getBasicComponent()
		con.term = window.create(t.term,1,1,10,10)
		con.setPos = function(x,y)
			con.term.reposition(x,y,con.w,con.h)
		end
		con.setSize = function(w,h)
			con.term.reposition(con.x,con.y,w,h)
		end
		con._showsetup= function()
			con.term.setVisible(false)
		end
		con._showend = function()
			con.term.setVisible(true)
			--con.term.redraw()
		end
		return con
	end
	t.getScrollContainer = function()
		local con = t.getBasicContainer()
		con.scrollx=0;con.scrolly=0;
		con.maxwidth=20;con.maxheight=20;
		con.setMaxSize = function(w,h)
			con.maxwidth=w; con.maxheight=h
		end
		con.show = function()
			con._showsetup()
			con.drawHorizontalScrollbar()
			con.drawVerticalScrollbar()
			con._showend()
		end
		return con
	end

end

















