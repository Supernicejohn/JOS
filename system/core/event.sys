local args = {...}
local system = args[1] -- internal system table, passed as arg

local tbl = {
    systemTimers = {},
    programTimers = {}
}

local consumeKeyEvent = function(event)
    if event[1] == "key" then
        if event[3] then
            system.core.peripheral.keyboard.onKeyHeld(event[2])
        else
            system.core.peripheral.keyboard.onKeyDown(event[2])
        end
    elseif event[2] == "key_down" then
        system.core.peripheral.keyboard.onKeyUp(event[2])
    end
    system.core.wm.onKeyEvent(event)
end
local consumeCharEvent = function(event)
    system.core.wm.onCharEvent(event)
end
local consumeTerminateEvent = function(event)
    local pid = system.core.programs.getFocusedPID()
    if pid == 0 then
        system.core.programs.resume(pid,event)
    else
        system.core.wm.onTerminateEvent(event)
    end
end
local consumeMouseEvent = function(event,isPushed)
    if isPushed then
        system.core.wm.onMouseEvent(event)
    else
        system.core.peripheral.mouse.consumeEvent(event)
    end
end
local consumeTimerEvent = function(event)
    if tbl.systemTimers[event[2]] then
        tbl.onSystemTimer(event[2])
    else
        local pid = tbl.programTimers[event[2]]
        if pid and pid ~= system.core.programs.getFocusedPID() then
            system.core.programs.resume(pid,event)
        else
            -- handle better, and as failsafe
            system.core.wm.onTimerEvent(event)
        end
    end
end
local consumeOtherEvent = function(event)
    system.core.programs.resume(0,{
        "unknown_event",
        event[1]
    })
end
tbl.handles = {
    key = consumeKeyEvent,
    key_up = consumeKeyEvent,
    char = consumeCharEvent,
    mouse_click = consumeMouseEvent,
    mouse_up = consumeMouseEvent,
    mouse_drag = consumeMouseEvent,
    mouse_scroll = consumeMouseEvent,
    timer = consumeTimerEvent,
    alarm = consumeTimerEvent,
    terminate = consumeTerminateEvent,
    default = consumeOtherEvent
}
tbl.queue = {}
tbl.popEvent = function() -- event queue only used if not empty
    local event = false
    local isPushed = false
    if #tbl.queue == 0 then
        event = {coroutine.yield()}
    else
        isPushed = true
        event = tbl.queue[1]
        for i=1, #tbl.queue-1 do
            tbl.queue[i] = tbl.queue[i+1]
        end
        tbl.queue[#tbl.queue] = nil
    end
    
    if tbl.handles[event[1]] then
        -- event handler exists
        tbl.handles[event[1]](event,isPushed)
    else
        tbl.handles.default(event,isPushed)
    end
end
tbl.pushEvent = function(pid,event)
    tbl.queue[#tbl.queue+1] = event
end
tbl.initEvent = function()
    tbl.timer = os.startTimer
    tbl.alarm = os.setAlarm
    tbl.cancelAlarm = os.cancelAlarm
    os.startTimer = function(time)
        local pid = system.core.programs.getFocusedPID()
        local uid = tbl.timer(time)
        tbl.programTimers[uid] = pid
        return uid
    end
    os.setAlarm = function(time)
        local pid = system.core.programs.getFocusedPID()
        local uid = tbl.alarm(time)
        tbl.programTimers[uid] = pid
        return uid        
    end
    os.cancelAlarm = function(uid)
        tbl.cancelAlarm(uid)
        tbl.programTimers[uid] = nil
    end
end
tbl.registerSystemTimer = function(time,pid,callback)
    local timerId = tbl.timer(time)
    tbl.systemTimers[timerId] = {pid = pid, callback = callback}
end
tbl.onSystemTimer = function(timerId)
    local t = tbl.systemTimers[timerId]
    if not t.pid then
        t.callback()
    else
        system.core.programs.resume(t.pid,{"timer",timerId})
    end
end

return tbl






